<?php
/**
 * This is the way MOBI files should be created if you want all features (TOC, images).
 *
 * File modified by Dawson for use in eBook Creator
 * Added pagebreaks and a setting to remove table of contents.
 */

class MOBIFile extends ContentProvider {
	const PARAGRAPH = 0;
	const H2 = 1;
	const H3 = 2;
	const IMAGE = 3;
	const PAGEBREAK = 4;
	
	const TOC_LINK = "_MOBI_TOC";
	const START_LINK = "_START_TOC";
	
	private $settings = array("title" => "Unknown Title", "toc" => true);
	private $parts = array();
	private $images = array();
	
	private $links = array();

	/**
	 * Get the text data (the "html" code)
	 */
	public function getTextData(){
		$str = new LinkedStringBuilder();
		
		$str->append("<html>");
		$str->append("<head>");
		$this->addGuide($str);
		$str->append("</head>");
		$str->append("<body>");
		
		$this->resolveFilepos($str, self::START_LINK);
		$str->append("<h1>".$this->settings["title"]."</h1>");
		
		$entries = $this->addText($str);
		
		$this->addTOC($str, $entries);
		
		$str->append("</body>");
		$str->append("</html>");
		
		return $str->build();
	}
	
	private function filepos($position) {
		return str_pad($position, 10, "0", STR_PAD_LEFT);
	}
	
	private function addFilepos($str, $name) {
		$str->addLink($name);
		$str->append($this->filepos(0));
	}
	
	private function resolveFilepos($str, $name) {
		$str->resolveLink($name, $this->filepos($str->length()));
	}
	
	private function addGuide($str) {
		$str->append("<guide>");
		$str->append("<reference title='CONTENT' type='toc' filepos=");
		$this->addFilepos($str, self::TOC_LINK);
		$str->append(" />");
		$str->append("<reference title='CONTENT' type='start' filepos=");
		$this->addFilepos($str, self::START_LINK);
		$str->append(" />");
		$str->append("</guide>");
	}
	
	
	/**
	 * Generate the body's text and the chapter entries
	 * @return array($string, $entries) $string is the html data, $entries
	 * contains the level, the title and the position of the titles.
	 */
	private function addText($str){
		$entries = array();
		
		for($i = 0; $i < sizeof($this->parts); $i++){
			list($type, $data) = $this->parts[$i];
			$id = "title_".$i;
			
			switch($type){
				case self::PARAGRAPH:
					$str->append("<p>".$data."</p>");
					break;
				case self::PAGEBREAK:
					$str->append("<mbp:pagebreak></mbp:pagebreak>");
					break;
				case self::H2:
					$entries[] = array("level" => 2, "title" => $data, "id" => $id);
					$this->resolveFilepos($str, $id);
					$str->append("<a name='".$id."'></a><h2 id='" . $id . "'>".$data."</h2>");
					break;
				case self::H3:
					$entries[] = array("level" => 3, "title" => $data, "id" => $id);
					$this->resolveFilepos($str, $id);
					$str->append("<a name='".$id."'></a><h3 id='" . $id . "'>".$data."</h3>");
					break;
				case self::IMAGE:
					$str->append("<img recindex=".str_pad($data+1, 10, "0", STR_PAD_LEFT)." />");
					break;
			}
		}
		return $entries;
	}
	
	/**
	 * Generate a TOC
	 * @param $str LinkedStringBuilder
	 * @param $entries The entries array generated by generateText (contains "id" and "title" values)
	 */
	private function addTOC($str, $entries){
		$this->resolveFilepos($str, self::TOC_LINK);
		$str->append("<h2>Contents</h2>");
		$str->append("<blockquote><table summary='Table of Contents'><col/><tbody>");
		for($i = 0, $len = sizeof($entries); $i < $len; $i++){
			$entry = $entries[$i];

			$str->append("<tr><td><a href='#".$entry["id"]."' filepos=");
			$this->addFilepos($str, $entry["id"]);
			$str->append(">".$entry["title"]."</a></td></tr>");
		}
		$str->append("</tbody></b></table></blockquote><mbp:pagebreak/>");
	}
	
	/**
	 * Get the file records of the images
	 */
	public function getImages(){
		return $this->images;
	}
	
	/**
	 * Get the metadata
	 */
	public function getMetaData(){
		return $this->settings;
	}
	
	/**
	 * Change the file's settings. For example set("author", "John Doe") or set("title", "The adventures of John Doe").
	 * @param $key Key of the setting to insert.
	 */
	public function set($key, $value){
		$this->settings[$key] = $value;
	}
	
	/**
	 * Get the file's settings.
	 */
	public function get($key){
		return $this->settings[$key];
	}
	
	/**
	 * Append a paragraph of text to the file.
	 * @param string $text The text to insert.
	 */
	public function appendParagraph($text){
		$this->parts[] = array(self::PARAGRAPH, $text);
	}
	
	/**
	 * Append a chapter title (H2)
	 * @param string $title The title to insert.
	 */
	public function appendChapterTitle($title){
		$this->parts[] = array(self::H2, $title);
	}
	
	/**
	 * Append a section title (H3)
	 * @param string $title The title to insert.
	 */
	public function appendSectionTitle($title){
		$this->parts[] = array(self::H3, $title);
	}
	
	public function appendPageBreak() {
		$this->parts[] = array(self::PAGEBREAK, null);
	}

	/**
	 * Append an image.
	 * @param resource $img An image file (for example, created by `imagecreate`)
	 */
	public function appendImage($img){
		$imgIndex = sizeof($this->images);
		$this->images[] = new FileRecord(new Record(ImageHandler::CreateImage($img)));
		$this->parts[] = array(self::IMAGE, $imgIndex);
	}
}